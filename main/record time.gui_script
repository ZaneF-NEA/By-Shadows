local name = ""

function init(self)
	msg.post(".", "acquire_input_focus") -- so the user can input their name.
	if marathonMode then -- retitle in marathon mode to make this make sense
		gui.set_text(gui.get_node("title"), "Marathon mode complete!")
	end
end

local function getTime(input) -- get the time from any line in the exisiting leaderboard
	local output = "" -- what gets returned
	local count = 1 -- current index
	local unfinished = true -- bool flag
	while unfinished do
		char = string.sub(input, count, count) -- get the char at index
		if char == "," then -- stop if the number has ended
			unfinished = false
		else
			output = output..char -- add the next letter of time to output
			count = count + 1 -- increment counter
		end
	end
	return tonumber(output) -- return it as a number so it can be compared to other numbers
end	

function on_input(self, action_id, action)
	if action_id == hash("type") then -- if the user begins to type anything
		name = name..action.text -- append what the user is typing to name
		gui.set_text(gui.get_node("enter name"), name) -- display name
	elseif action_id == hash("rock") and action.pressed and action.x < 750 and action.x > 550 and action.y < 140 and action.y > 40 then -- if the user clicks the ok button
		if string.len(name) > 3 or string.len(name) == 0 then -- validation for name
			gui.set_text(gui.get_node("enter name"), "Please enter a name between 1-3 characters.") -- error message
			name = "" -- reset name
		else
			-- variables that are local to this entire code block
			local newLeaderboard = { } -- create a new leaderboard
			local savefile = "" -- where savefile location will be stored
			local fileLocation = "" -- savefile path
			local newEntry = ""
			if marathonMode then
				fileLocation = "marathon mode.txt"
				savefile = io.open(fileLocation, "r") -- open marathon mode file in read mode.
				newEntry = tostring(timeRemaining)..", "..name..", "..os.date() -- save the new entry as time, name, date
			else
				fileLocation = "level "..level..".txt" -- save file location. All files are "level <level num>.txt"
				savefile = io.open(fileLocation, "r") -- open level leaderboard in read mode to variable file.
				newEntry = tostring(120 - timeRemaining)..", "..name..", "..os.date() -- as the timer counts down, time taken is time given - time left on the clock
			end
			if savefile == nil or savefile:read() == nil then -- if the file doesn't exist or is empty, skip reading it and just add the one time
				newLeaderboard[1] = newEntry
			else
				local added = false
				for line in io.lines(fileLocation) do
					if 120 - timeRemaining <= getTime(tostring(line)) and not added and #newLeaderboard <= 20 then -- iterate through the leaderboard and add the new time
						newLeaderboard[#newLeaderboard + 1] = newEntry
						added = true
					end
					if #newLeaderboard < 20 then -- set the 20 highest
						newLeaderboard[#newLeaderboard + 1] = line
					end
				end -- io.lines closes the file here
				if not added and #newLeaderboard < 20 then -- if there's still space and the current time hasn't been added, add it
					newLeaderboard[#newLeaderboard + 1] = newEntry
				end
			end
			savefile = io.open(fileLocation, "w") -- overwrite all data in the savefile
			for key, value in pairs(newLeaderboard) do -- iterate through leaderboard table
				savefile:write(value.."\n") -- add current row to file, create a new line
			end
			io.close() -- close savefile to safely store its data
			msg.post("main:/main#record_time", "unload") -- exit menu
			msg.post(levelURL, "unload") -- exit level
			msg.post("main:/gui#menu", "load") -- load main menu gui into memory
			msg.post("main:/gui#menu", "init") -- initiliases menu and functions
			msg.post("main:/gui#menu", "enable") -- enables and shows main menu gui
			msg.post("main:/gui#menu", "acquire_input_focus") -- allows user to interact with main menu
		end
	end
end

-- LEADERBOARD IS IN FORMAT TIME, NAME, DATE
-- add to leaderboard
-- 1. open leaderboard file (read)
-- 2. make new empty table
-- 3. iterate through the file
-- 3a. if new time > time on table, add the time on table to the new table
-- 3b. if new time < time on table, add the new time on table, and the rest of the times in the existing table
-- 4. remove the last line in the new table if the table has more than 20 entries
-- 5. close leaderboard
-- 6. overwrite existing table with new table

-- check if level is beaten
-- if leaderboard for the level is empty, level is unbeaten